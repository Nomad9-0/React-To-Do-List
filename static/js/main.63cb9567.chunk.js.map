{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","tasks","completeTodo","removeTodo","updateTask","setEdit","map","task","index","isComplete","onClick","TodoList","setTasks","test","newTask","console","log","updatedTasks","removeArr","filter","taskId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63cb9567.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\n\r\nfunction TodoForm(props) {\r\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        inputRef.current.focus()\r\n    })\r\n    \r\n    const handleChange = e => {\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id: Math.floor(Math.random() * 10000), // adds random id to task, can be refactored to avoid duplicate ids\r\n            text: input\r\n        });\r\n        setInput('');\r\n    };\r\n\r\n    return (\r\n        <form className='todo-form' onSubmit={handleSubmit}>\r\n            {props.edit ? (\r\n                <>\r\n                <input type='text' placeholder='Update your task' value={input} name='text' className='todo-input edit' onChange={handleChange} ref={inputRef} />\r\n                <button className='todo-button edit'>Update</button>\r\n                </>\r\n                ) : ( \r\n                <>\r\n                <input type='text' placeholder='Add a task' value={input} name='text' className='todo-input' onChange={handleChange} ref={inputRef} />\r\n                <button className='todo-button'>Add</button> \r\n                </>\r\n            )}\r\n            \r\n        </form>\r\n    )\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { TiEdit } from 'react-icons/ti';\r\n\r\nfunction Todo({tasks, completeTodo, removeTodo, updateTask}) {\r\n    const [edit, setEdit] = useState({\r\n        id: null,\r\n        value: ''\r\n    });\r\n\r\n    const submitUpdate = value => {\r\n        updateTask(edit.id, value)\r\n        setEdit({\r\n            id: null,\r\n            value: ''\r\n        })\r\n    }\r\n\r\n    if(edit.id) {\r\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\r\n    }\r\n\r\n    return tasks.map((task, index) => (\r\n        <div className={task.isComplete ? 'todo-row complete' : 'todo-row'} key={index}>\r\n            <div key={task.id} onClick={() => completeTodo(task.id)}>\r\n                {task.text}\r\n            </div>\r\n            <div className='icons'>\r\n                <RiCloseCircleLine onClick={() => removeTodo(task.id)} className='delete-icon' />\r\n                <TiEdit onClick={() => setEdit({id: task.id, value: task.text})} className='edit-icon' />\r\n            </div>\r\n        </div>\r\n    ))\r\n}\r\n\r\nexport default Todo\r\n","import React, { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nfunction TodoList() {\r\n    const [tasks, setTasks] = useState([]);\r\n\r\n    const addTasks = task => {\r\n        if(!task.text || /^\\s*$/.test(task.text)) {\r\n            return;\r\n        }\r\n        const newTask = [task, ...tasks];\r\n\r\n        setTasks(newTask);\r\n        console.log(task, ...tasks);\r\n    };\r\n\r\n    const updateTask = (taskId, newValue) => {\r\n        if(!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return;\r\n        }\r\n\r\n        setTasks(prev => prev.map(item => (item.id === taskId ? newValue : item)));\r\n    }\r\n\r\n    const removeTodo = id => {\r\n        const removeArr = [...tasks].filter(task => task.id !== id);\r\n        setTasks(removeArr);\r\n    }\r\n\r\n    const completeTodo = id => {\r\n        let updatedTasks = tasks.map(task => {\r\n            if (task.id === id) {\r\n                task.isComplete = !task.isComplete\r\n            }\r\n            return task;\r\n        })\r\n        setTasks(updatedTasks)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Todays Tasks</h1>\r\n            <TodoForm onSubmit={addTasks} />    \r\n            <Todo tasks={tasks} completeTodo={completeTodo} removeTodo={removeTodo} updateTask={updateTask} />    \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"toDoApp\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}